openapi: 3.0.3
info:
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features
  version: 1.0.0
servers:
  - url: https://petstore3.swagger.io/api/v3
paths:
  /pets:
    get:
      tags:
        - pet
      summary: Find pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              examples:
                default:
                  summary: Default pet list
                  value:
                    - id: 1
                      name: doggie
                      photoUrls:
                        - "string"
                      tags:
                        - id: 0
                          name: "string"
                      status: available
                empty:
                  summary: Empty pet list
                  value: []
                premium:
                  summary: Premium pets only
                  value:
                    - id: 100
                      name: "King"
                      photoUrls:
                        - "https://example.com/king.jpg"
                      tags:
                        - id: 1
                          name: "premium"
                      status: "available"
        '400':
          description: Invalid status value
          content:
            application/json:
              example:
                error: "Invalid status value"
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 1
                name: doggie
                photoUrls:
                  - "string"
                tags:
                  - id: 0
                    name: "string"
                status: available
        '405':
          description: Invalid input
          content:
            application/json:
              example:
                error: "Invalid input"
  /pets/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                default:
                  summary: Default pet
                  value:
                    id: 1
                    name: doggie
                    photoUrls:
                      - "string"
                    tags:
                      - id: 0
                        name: "string"
                    status: available
                premium:
                  summary: Premium pet
                  value:
                    id: 100
                    name: "King"
                    photoUrls:
                      - "https://example.com/king.jpg"
                    tags:
                      - id: 1
                        name: "premium"
                    status: "available"
                sold:
                  summary: Sold pet
                  value:
                    id: 5
                    name: "Max"
                    photoUrls:
                      - "https://example.com/max.jpg"
                    tags:
                      - id: 2
                        name: "sold"
                    status: "sold"
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              example:
                error: "Invalid ID supplied"
        '404':
          description: Pet not found
          content:
            application/json:
              example:
                error: "Pet not found"
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet deleted successfully
          content:
            application/json:
              example: {}
        '400':
          description: Invalid pet value
          content:
            application/json:
              example:
                error: "Invalid pet value"
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold