name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    # BEST PRACTICE: Explicitly grant permissions for the GITHUB_TOKEN.
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        run: |
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD > RELEASE_NOTES.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.txt
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permission to upload assets to the release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binaries
        run: |
          mkdir -p dist
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Build all binaries
          for GOOS in linux darwin windows; do
            for GOARCH in amd64 arm64; do
              if [ "$GOOS" = "windows" ] && [ "$GOARCH" = "arm64" ]; then
                continue # Skip windows arm64
              fi
          
              BINARY_NAME=go-spec-mock-${GOOS}-${GOARCH}
              if [ "$GOOS" = "windows" ]; then
                BINARY_NAME="${BINARY_NAME}.exe"
              fi
          
              echo "Building for $GOOS/$GOARCH..."
              GOOS=$GOOS GOARCH=$GOARCH go build -ldflags "-s -w -X main.Version=${VERSION} -X main.Commit=${COMMIT:0:7} -X main.Date=${DATE}" -o dist/${BINARY_NAME} .
              cd dist && tar -czf ${BINARY_NAME}.tar.gz ${BINARY_NAME} && cd ..
            done
          done

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Release Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max